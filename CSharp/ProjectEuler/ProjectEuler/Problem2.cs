using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;

namespace ProjectEuler
{
    /// <summary>
    /// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
    /// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    /// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
    /// </summary>
    public class Problem2 : BaseProblem
    {
        [Test]
        public void Problem2_Loop()
        {
            var sum = 0;
            var x = 0;
            var y = 1;
            int nextFib;
            do
            {
                nextFib = x + y;
                if (nextFib % 2 == 0)
                    sum += nextFib;

                x = y;
                y = nextFib;
            } while (nextFib < 4000000);

            Assert.AreEqual(4613732, sum);
        }

        [Test]
        public void Problem2_Recursive()
        {
            Assert.AreEqual(4613732, EvenFibonacciToLimit(4000000).Sum());
        }

        private static IEnumerable<int> EvenFibonacciToLimit(int limit)
        {
            var tester = new Func<int, bool>((item) => item % 2 == 0);
            return FibonacciToLimit(limit, null, tester);
        }

        //TODO: Lists could be changed out for simple x, y, and accumulator values.
        private static IEnumerable<int> FibonacciToLimit(int limit, List<int> sequence = null, Func<int, bool> tester = null, List<int> filteredSequence = null)
        {
            if (sequence == null)
                sequence = new List<int> { 0, 1 };

            var nextFib = sequence[sequence.Count - 1] + sequence[sequence.Count - 2];
            if (nextFib >= limit)
                return tester == null ? sequence : filteredSequence;

            sequence.Add(nextFib);
            if (tester != null && tester(nextFib))
            {
                if (filteredSequence == null)
                    filteredSequence = new List<int>();

                filteredSequence.Add(nextFib);
            }

            return FibonacciToLimit(limit, sequence, tester, filteredSequence);
        }
    }
}